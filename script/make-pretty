#!/bin/bash
#
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The script to check or format source code of Silk.
#
# Format markdown, python, and shell:
#
#     script/make-pretty
#
# Format markdown only:
#
#     script/make-pretty markdown
#
# Format python only:
#
#     script/make-pretty python
#
# Format shell only:
#
#     script/make-pretty shell
#
# Check only:
#
#     script/make-pretty check markdown
#     script/make-pretty check python
#     script/make-pretty check shell
#

set -euo pipefail

readonly BUILD_JOBS=$(getconf _NPROCESSORS_ONLN)
readonly EXCLUDE_DIRS=(tools/pb)

readonly MARKDOWN_SOURCES=('*.md')
readonly PYTHON_SOURCES=('*.py')

do_markdown_format()
{
    echo -e '======================'
    echo -e '     format markdown'
    echo -e '======================'

    git ls-files "${MARKDOWN_SOURCES[@]}" | grep -v -E "^($(echo "${EXCLUDE_DIRS[@]}" | tr ' ' '|'))" \
        | xargs npx prettier@2.0.4 --write
}

do_markdown_check()
{
    echo -e '======================'
    echo -e '     check markdown'
    echo -e '======================'

    git ls-files "${MARKDOWN_SOURCES[@]}" | grep -v -E "^($(echo "${EXCLUDE_DIRS[@]}" | tr ' ' '|'))" \
        | xargs npx prettier@2.0.4 --check
}

do_python_format()
{
    echo -e '======================'
    echo -e '     format python'
    echo -e '======================'

    git ls-files "${PYTHON_SOURCES[@]}" | grep -v -E "^($(echo "${EXCLUDE_DIRS[@]}" | tr ' ' '|'))" \
        | xargs python3 -m yapf --verbose --style '{based_on_style: google, column_limit: 119}' -ipr
}

do_python_check()
{
    echo -e '====================='
    echo -e '     check python'
    echo -e '====================='

    git ls-files "${PYTHON_SOURCES[@]}" | grep -v -E "^($(echo "${EXCLUDE_DIRS[@]}" | tr ' ' '|'))" \
        | xargs -n10 -P"$BUILD_JOBS" python3 -m yapf --verbose --style '{based_on_style: google, column_limit: 119}' -dpr
}

do_shell_format()
{
    echo -e '====================='
    echo -e '     format shell'
    echo -e '====================='

    git ls-files | xargs shfmt -f | grep -v -E "^($(echo "${EXCLUDE_DIRS[@]}" | tr ' ' '|'))" \
        | xargs shfmt -i 4 -bn -ci -fn -s -w
}

do_shell_check()
{
    echo -e '====================='
    echo -e '     check shell'
    echo -e '====================='

    git ls-files | xargs shfmt -f | grep -v -E "^($(echo "${EXCLUDE_DIRS[@]}" | tr ' ' '|'))" \
        | xargs shfmt -i 4 -bn -ci -fn -s -d

    git ls-files | xargs shfmt -f | grep -v -E "^($(echo "${EXCLUDE_DIRS[@]}" | tr ' ' '|'))" \
        | xargs shellcheck
}

do_check()
{
    if [ $# == 0 ]; then
        do_markdown_check
        do_python_check
        do_shell_check
    elif [ "$1" == 'markdown' ]; then
        do_markdown_check
    elif [ "$1" == 'python' ]; then
        do_python_check
    elif [ "$1" == 'shell' ]; then
        do_shell_check
    else
        echo >&2 "Unsupported check: $1. Supported: markdown, python, shell"
        # 128 for Invalid arguments
        exit 128
    fi
}

main()
{
    if [ $# == 0 ]; then
        do_markdown_format
        do_python_format
        do_shell_format
    elif [ "$1" == 'markdown' ]; then
        do_markdown_format
    elif [ "$1" == 'python' ]; then
        do_python_format
    elif [ "$1" == 'shell' ]; then
        do_shell_format
    elif [ "$1" == 'check' ]; then
        shift
        do_check "$@"
    else
        echo >&2 "Unsupported action: $1. Supported: markdown, python, shell"
        # 128 for Invalid arguments
        exit 128
    fi

}

main "$@"
